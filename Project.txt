TABLE:
	
    CREATE TABLE Status (
        status_id NUMBER PRIMARY KEY,
        status VARCHAR2(100)
    )
    STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);

    CREATE TABLE Project_Role (
        project_role_id NUMBER PRIMARY KEY,
        project_role VARCHAR2(100)
    )
    STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);

    CREATE TABLE Project_Status (
        project_status_id NUMBER PRIMARY KEY,
        project_status VARCHAR2(100)
    )
    STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);

    CREATE TABLE Attendance_Status (
        attendance_status_id NUMBER PRIMARY KEY,
        attendance_status VARCHAR2(100)
    )
    STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);

    CREATE TABLE Technology (
        technology_id NUMBER PRIMARY KEY,
        technology_name VARCHAR2(100),  
        technology_details VARCHAR2(500)
    )
    STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);

CREATE TABLE Designations (
        designation_id NUMBER PRIMARY KEY,
        designation_title VARCHAR2(100),
        designation_details VARCHAR2(500),
        department_id NUMBER,
        designation_status NUMBER REFERENCES Status(status_id)
    )
    CLUSTER employee_department_cluster (department_id);


 CREATE OR REPLACE TYPE phone_numbers_varray AS VARRAY(3) OF VARCHAR2(15);

CREATE TABLE Employees (
    employee_id NUMBER PRIMARY KEY,
    employee_first_name VARCHAR2(100) NOT NULL,
    employee_last_name VARCHAR2(100) NOT NULL,
    employee_email VARCHAR2(200) UNIQUE NOT NULL,
    employee_phone_numbers phone_numbers_varray,  
    employee_date_of_birth DATE,
    employee_gender VARCHAR2(1) CHECK (employee_gender IN ('M', 'F', 'O')),
    employee_address VARCHAR2(500),  
    employee_joining_date DATE NOT NULL,
    department_id NUMBER,
    employee_designation NUMBER REFERENCES Designations(designation_id),
    employee_status NUMBER REFERENCES Status(status_id)
)
CLUSTER employee_department_cluster (department_id);


		CREATE OR REPLACE TYPE address_obj AS OBJECT (
            block VARCHAR2(100),
            house_no VARCHAR2(20),
            society VARCHAR2(100),
            area VARCHAR2(100),
            district VARCHAR2(100),
            state VARCHAR2(100),
            pincode VARCHAR2(10)
        );

        
        CREATE OR REPLACE TYPE address_nested_table AS TABLE OF address_obj;

        
        ALTER TABLE Employees
        ADD employee_address address_nested_table
        NESTED TABLE employee_address STORE AS employee_address_nt;


CREATE OR REPLACE TYPE location_obj AS OBJECT (
    location_room_no VARCHAR2(100),
    location_floor VARCHAR2(100),
    location_block VARCHAR2(100)
);

CREATE OR REPLACE TYPE location_nested_table AS TABLE OF location_obj;

CREATE TABLE Locations (
    location_id NUMBER PRIMARY KEY,
    location_status NUMBER REFERENCES Status(status_id),
    location location_nested_table  
)
NESTED TABLE location STORE AS location_nt
STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);



CREATE TABLE Departments (
    department_id NUMBER PRIMARY KEY,
    department_name VARCHAR2(100),
    department_details VARCHAR2(500),
    department_location NUMBER REFERENCES Locations(location_id),
    department_status NUMBER REFERENCES Status(status_id)
)
CLUSTER employee_department_cluster (department_id);


CREATE TABLE Projects (
        project_id NUMBER PRIMARY KEY,
        project_name VARCHAR2(200),
        project_details VARCHAR2(1000),
        project_assign_date DATE,
        project_allocate_date DATE,
        project_completion_date DATE,
        project_budget NUMBER,
        project_technologies_used NUMBER REFERENCES Technology(technology_id),
        project_status NUMBER REFERENCES Project_Status(project_status_id)
    )
    CLUSTER project_assignment_cluster (project_id);


CREATE TABLE Employee_Project_Assignments (
        assignment_id NUMBER PRIMARY KEY,
        assignment_assign_date DATE,
        assignment_allocate_date DATE,
        assignment_completion_date DATE,
        assignment_hours_allocated NUMBER,
        assignment_hours_work NUMBER,
        assignment_remarks VARCHAR2(500),
        project_id NUMBER,
        employee_id NUMBER REFERENCES Employees(employee_id),   
        project_role NUMBER REFERENCES Project_Role(project_role_id),
        assignment_status NUMBER REFERENCES Project_Status(project_status_id)
    )
    CLUSTER project_assignment_cluster (project_id);




 CREATE TABLE Attendance (
        attendance_id NUMBER PRIMARY KEY,
        attendance_date DATE,
        check_in_time TIMESTAMP,
        check_out_time TIMESTAMP,
        total_hours_work NUMBER,
        overtime_hours NUMBER,
        employee_id NUMBER,
        attendance_status NUMBER REFERENCES Attendance_Status(attendance_status_id)
    )   
    CLUSTER employee_work_cluster (employee_id);


    CREATE TABLE Leave (
        leave_id NUMBER PRIMARY KEY,
        leave_type VARCHAR2(100),
        leave_from_date DATE,
        leave_to_date DATE,
        leave_total_days NUMBER,
        employee_id NUMBER
    )
    CLUSTER employee_work_cluster (employee_id);

CREATE TABLE Training_Programs (
        training_id NUMBER PRIMARY KEY,
        training_program_name VARCHAR2(200),
        training_program_details VARCHAR2(1000),
        training_technology_skills VARCHAR2(500),
        training_start_date DATE,
        training_end_date DATE,
        training_duration NUMBER,
        employee_id NUMBER REFERENCES Employees(employee_id),
        project_id NUMBER REFERENCES Projects(project_id),
        training_status NUMBER REFERENCES Status(status_id)
    )
    STORAGE (INITIAL 1000 NEXT 500 MINEXTENTS 1 MAXEXTENTS 2);

CREATE TABLE Salaries (
    salary_id NUMBER PRIMARY KEY,
    salary_amount NUMBER,
    salary_effective_from DATE,
    salary_category VARCHAR2(20) CHECK (salary_category IN ('Regular', 'Overtime', 'Leave')),
    employee_id NUMBER REFERENCES Employees(employee_id),
    attendance_id NUMBER REFERENCES Attendance(attendance_id),
    leave_id NUMBER REFERENCES Leave(leave_id)
)
PARTITION BY LIST (salary_category) (
    PARTITION regular_emp VALUES ('Regular'),
    PARTITION overtime_emp VALUES ('Overtime'),
    PARTITION leave_emp VALUES ('Leave')
);





INDEX:

CREATE INDEX idx_employees_department_id ON Employees(department_id);

CREATE INDEX idx_employees_last_name ON Employees(employee_last_name);

CREATE INDEX idx_departments_location_id ON Departments(department_location);

CREATE INDEX idx_departments_name ON Departments(department_name);

CREATE INDEX idx_salaries_employee_id ON Salaries(employee_id);

CREATE INDEX idx_attendance_status_id ON Attendance(attendance_status);

CREATE INDEX idx_attendance_date ON Attendance(attendance_date);


CREATE INDEX idx_employee_department_cluster
    ON CLUSTER employee_department_cluster
    STORAGE (
        INITIAL 1000
        NEXT 500
        MINEXTENTS 1
        MAXEXTENTS 5
    );


CREATE INDEX idx_employee_work_cluster
    ON CLUSTER employee_work_cluster
    STORAGE (
        INITIAL 1000
        NEXT 500
        MINEXTENTS 1
        MAXEXTENTS 5
    );


CREATE INDEX idx_project_assignment_cluster
    ON CLUSTER project_assignment_cluster
    STORAGE (
        INITIAL 1000
        NEXT 500
        MINEXTENTS 1
        MAXEXTENTS 5
    );




CLUSTER:

CREATE CLUSTER employee_department_cluster (
    department_id NUMBER
) 
SIZE 1000
STORAGE (
    INITIAL 1000
    NEXT 500
    MINEXTENTS 1
    MAXEXTENTS 5
);

CREATE CLUSTER employee_work_cluster (
    employee_id NUMBER
)
SIZE 1000
    STORAGE (
    INITIAL 1000
    NEXT 500
    MINEXTENTS 1
    MAXEXTENTS 5
);

CREATE CLUSTER project_assignment_cluster (
    project_id NUMBER
)
SIZE 1000
    STORAGE (
    INITIAL 1000
    NEXT 500
    MINEXTENTS 1
    MAXEXTENTS 5
);





VIEW:

CREATE OR REPLACE VIEW Employee_Details AS
SELECT 
    e.employee_id,
    e.employee_first_name,
    e.employee_last_name,
    e.employee_email,
    e.employee_phone_numbers,
    e.employee_date_of_birth,
    e.employee_gender,
    e.employee_address,
    e.employee_joining_date,
    d.department_name,
    des.designation_title,
    s.status AS employee_status
FROM 
    Employees e
JOIN 
    Departments d ON e.department_id = d.department_id
JOIN 
    Designations des ON e.employee_designation = des.designation_id
JOIN 
    Status s ON e.employee_status = s.status_id;


CREATE OR REPLACE VIEW Project_Details AS
SELECT 
    p.project_id,
    p.project_name,
    p.project_details,
    p.project_assign_date,
    p.project_allocate_date,
    p.project_completion_date,
    p.project_budget,
    t.technology_name AS used_technology,
    ps.project_status AS current_status
FROM 
    Projects p
JOIN 
    Technology t ON p.project_technologies_used = t.technology_id
JOIN 
    Project_Status ps ON p.project_status = ps.project_status_id;



CREATE OR REPLACE VIEW Employee_Project_Assignments_View AS
SELECT 
    epa.assignment_id,
    epa.assignment_assign_date,
    epa.assignment_allocate_date,
    epa.assignment_completion_date,
    epa.assignment_hours_allocated,
    epa.assignment_hours_work,
    epa.assignment_remarks,
    e.employee_first_name || ' ' || e.employee_last_name AS employee_name,
    p.project_name,
    pr.project_role,
    ps.project_status AS assignment_status
FROM 
    Employee_Project_Assignments epa
JOIN 
    Employees e ON epa.employee_id = e.employee_id
JOIN 
    Projects p ON epa.project_id = p.project_id
JOIN 
    Project_Role pr ON epa.project_role = pr.project_role_id
JOIN 
    Project_Status ps ON epa.assignment_status = ps.project_status_id;



CREATE OR REPLACE VIEW Attendance_Summary AS
SELECT 
    a.attendance_id,
    a.attendance_date,
    a.check_in_time,
    a.check_out_time,
    a.total_hours_work,
    a.overtime_hours,
    e.employee_first_name || ' ' || e.employee_last_name AS employee_name,
    as.status AS attendance_status
FROM 
    Attendance a
JOIN 
    Employees e ON a.employee_id = e.employee_id
JOIN 
    Attendance_Status as ON a.attendance_status = as.attendance_status_id;



CREATE OR REPLACE VIEW Leave_Summary AS
SELECT 
    l.leave_id,
    l.leave_type,
    l.leave_from_date,
    l.leave_to_date,
    l.leave_total_days,
    e.employee_first_name || ' ' || e.employee_last_name AS employee_name
FROM 
    Leave l
JOIN 
    Employees e ON l.employee_id = e.employee_id;



CREATE OR REPLACE VIEW Training_Programs_View AS
SELECT 
    tp.training_id,
    tp.training_program_name,
    tp.training_program_details,
    tp.training_technology_skills,
    tp.training_start_date,
    tp.training_end_date,
    tp.training_duration,
    e.employee_first_name || ' ' || e.employee_last_name AS employee_name,
    p.project_name,
    s.status AS training_status
FROM 
    Training_Programs tp
JOIN 
    Employees e ON tp.employee_id = e.employee_id
JOIN 
    Projects p ON tp.project_id = p.project_id
JOIN 
    Status s ON tp.training_status = s.status_id;



CREATE OR REPLACE VIEW Salary_Details AS
SELECT 
    s.salary_id,
    s.salary_amount,
    s.salary_effective_from,
    s.salary_category,
    e.employee_first_name || ' ' || e.employee_last_name AS employee_name,
    a.attendance_id,
    l.leave_id
FROM 
    Salaries s
LEFT JOIN 
    Employees e ON s.employee_id = e.employee_id
LEFT JOIN 
    Attendance a ON s.attendance_id = a.attendance_id
LEFT JOIN 
    Leave l ON s.leave_id = l.leave_id;




SEQUENCES:

Employees_Seq: 
    CREATE SEQUENCE Employees_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Departments_Seq: 
    CREATE SEQUENCE Departments_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Jobs_Seq: 
    CREATE SEQUENCE Jobs_Seq
        START WITH 1001 
        INCREMENT BY 1  
    NOCACHE;

Salaries_Seq: 
    CREATE SEQUENCE Salaries_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Locations_Seq: 
    CREATE SEQUENCE Locations_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Projects_Seq: 
    CREATE SEQUENCE Projects_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Employee_Project_Assignments_Seq: 
    CREATE SEQUENCE Employee_Project_Assignments_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;
   
Attendance_Seq: 
    CREATE SEQUENCE Attendance_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Leaves_Seq: 
    CREATE SEQUENCE Leaves_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Performance_Reviews_Seq: 
    CREATE SEQUENCE Performance_Reviews_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Benefits_Seq: 
    CREATE SEQUENCE Benefits_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Training_Programs_Seq: 
    CREATE SEQUENCE Training_Programs_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

Employee_Training_Seq: 
    CREATE SEQUENCE Employee_Training_Seq
        START WITH 1001
        INCREMENT BY 1
        NOCACHE;

   


TRIGGER:

CREATE OR REPLACE TRIGGER trg_check_employee_joining_date
BEFORE INSERT OR UPDATE ON Employees
FOR EACH ROW
BEGIN
    IF :NEW.employee_joining_date > SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Employee joining date cannot be later than today''s date.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_check_leave_dates
BEFORE INSERT OR UPDATE ON Leave
FOR EACH ROW
BEGIN
    IF :NEW.leave_to_date < :NEW.leave_from_date THEN
        RAISE_APPLICATION_ERROR(-20002, 'Leave to date cannot be earlier than leave from date.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_check_training_dates
BEFORE INSERT OR UPDATE ON Training_Programs
FOR EACH ROW
BEGIN
    IF :NEW.training_end_date < :NEW.training_start_date THEN
        RAISE_APPLICATION_ERROR(-20003, 'Training end date cannot be earlier than training start date.');
    END IF;
END;
/





PROCUDURES:

CREATE OR REPLACE PACKAGE designation_pkg IS
    PROCEDURE insert_designation(
        p_designation_id IN NUMBER,
        p_designation_title IN VARCHAR2,
        p_designation_details IN VARCHAR2,
        p_department_id IN NUMBER,
        p_designation_status IN NUMBER
    );
    PROCEDURE update_designation(
        p_designation_id IN NUMBER,
        p_designation_title IN VARCHAR2,
        p_designation_details IN VARCHAR2,
        p_department_id IN NUMBER,
        p_designation_status IN NUMBER
    );
    PROCEDURE delete_designation(p_designation_id IN NUMBER);
END designation_pkg;
/

CREATE OR REPLACE PACKAGE BODY designation_pkg IS
    PROCEDURE insert_designation(
        p_designation_id IN NUMBER,
        p_designation_title IN VARCHAR2,
        p_designation_details IN VARCHAR2,
        p_department_id IN NUMBER,
        p_designation_status IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Designations (designation_id, designation_title, designation_details, department_id, designation_status)
        VALUES (p_designation_id, p_designation_title, p_designation_details, p_department_id, p_designation_status);
    END insert_designation;

    PROCEDURE update_designation(
        p_designation_id IN NUMBER,
        p_designation_title IN VARCHAR2,
        p_designation_details IN VARCHAR2,
        p_department_id IN NUMBER,
        p_designation_status IN NUMBER
    ) IS
    BEGIN
        UPDATE Designations
        SET designation_title = p_designation_title,
            designation_details = p_designation_details,
            department_id = p_department_id,
            designation_status = p_designation_status
        WHERE designation_id = p_designation_id;
    END update_designation;

    PROCEDURE delete_designation(p_designation_id IN NUMBER) IS
    BEGIN
        DELETE FROM Designations
        WHERE designation_id = p_designation_id;
    END delete_designation;
END designation_pkg;
/


CREATE OR REPLACE PACKAGE employees_pkg IS
    PROCEDURE insert_employee(
        p_employee_id IN NUMBER,
        p_first_name IN VARCHAR2,
        p_last_name IN VARCHAR2,
        p_email IN VARCHAR2,
        p_phone_numbers IN phone_numbers_varray,
        p_dob IN DATE,
        p_gender IN VARCHAR2,
        p_address IN address_nested_table,
        p_joining_date IN DATE,
        p_department_id IN NUMBER,
        p_designation_id IN NUMBER,
        p_status_id IN NUMBER
    );
    PROCEDURE update_employee(
        p_employee_id IN NUMBER,
        p_first_name IN VARCHAR2,
        p_last_name IN VARCHAR2,
        p_email IN VARCHAR2,
        p_phone_numbers IN phone_numbers_varray,
        p_dob IN DATE,
        p_gender IN VARCHAR2,
        p_address IN address_nested_table,
        p_joining_date IN DATE,
        p_department_id IN NUMBER,
        p_designation_id IN NUMBER,
        p_status_id IN NUMBER
    );
    PROCEDURE delete_employee(p_employee_id IN NUMBER);
END employees_pkg;
/

CREATE OR REPLACE PACKAGE BODY employees_pkg IS
    PROCEDURE insert_employee(
        p_employee_id IN NUMBER,
        p_first_name IN VARCHAR2,
        p_last_name IN VARCHAR2,
        p_email IN VARCHAR2,
        p_phone_numbers IN phone_numbers_varray,
        p_dob IN DATE,
        p_gender IN VARCHAR2,
        p_address IN address_nested_table,
        p_joining_date IN DATE,
        p_department_id IN NUMBER,
        p_designation_id IN NUMBER,
        p_status_id IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Employees (
            employee_id, employee_first_name, employee_last_name, employee_email,
            employee_phone_numbers, employee_date_of_birth, employee_gender,
            employee_address, employee_joining_date, department_id, employee_designation,
            employee_status
        )
        VALUES (
            p_employee_id, p_first_name, p_last_name, p_email, p_phone_numbers,
            p_dob, p_gender, p_address, p_joining_date, p_department_id,
            p_designation_id, p_status_id
        );
    END insert_employee;

    PROCEDURE update_employee(
        p_employee_id IN NUMBER,
        p_first_name IN VARCHAR2,
        p_last_name IN VARCHAR2,
        p_email IN VARCHAR2,
        p_phone_numbers IN phone_numbers_varray,
        p_dob IN DATE,
        p_gender IN VARCHAR2,
        p_address IN address_nested_table,
        p_joining_date IN DATE,
        p_department_id IN NUMBER,
        p_designation_id IN NUMBER,
        p_status_id IN NUMBER
    ) IS
    BEGIN
        UPDATE Employees
        SET employee_first_name = p_first_name,
            employee_last_name = p_last_name,
            employee_email = p_email,
            employee_phone_numbers = p_phone_numbers,
            employee_date_of_birth = p_dob,
            employee_gender = p_gender,
            employee_address = p_address,
            employee_joining_date = p_joining_date,
            department_id = p_department_id,
            employee_designation = p_designation_id,
            employee_status = p_status_id
        WHERE employee_id = p_employee_id;
    END update_employee;

    PROCEDURE delete_employee(p_employee_id IN NUMBER) IS
    BEGIN
        DELETE FROM Employees
        WHERE employee_id = p_employee_id;
    END delete_employee;
END employees_pkg;
/



CREATE OR REPLACE PACKAGE departments_pkg IS
    PROCEDURE insert_department(
        p_department_id IN NUMBER,
        p_department_name IN VARCHAR2,
        p_department_details IN VARCHAR2,
        p_department_location IN NUMBER,
        p_department_status IN NUMBER
    );
    PROCEDURE update_department(
        p_department_id IN NUMBER,
        p_department_name IN VARCHAR2,
        p_department_details IN VARCHAR2,
        p_department_location IN NUMBER,
        p_department_status IN NUMBER
    );
    PROCEDURE delete_department(p_department_id IN NUMBER);
END departments_pkg;
/

CREATE OR REPLACE PACKAGE BODY departments_pkg IS
    PROCEDURE insert_department(
        p_department_id IN NUMBER,
        p_department_name IN VARCHAR2,
        p_department_details IN VARCHAR2,
        p_department_location IN NUMBER,
        p_department_status IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Departments (
            department_id, department_name, department_details,
            department_location, department_status
        )
        VALUES (
            p_department_id, p_department_name, p_department_details,
            p_department_location, p_department_status
        );
    END insert_department;

    PROCEDURE update_department(
        p_department_id IN NUMBER,
        p_department_name IN VARCHAR2,
        p_department_details IN VARCHAR2,
        p_department_location IN NUMBER,
        p_department_status IN NUMBER
    ) IS
    BEGIN
        UPDATE Departments
        SET department_name = p_department_name,
            department_details = p_department_details,
            department_location = p_department_location,
            department_status = p_department_status
        WHERE department_id = p_department_id;
    END update_department;

    PROCEDURE delete_department(p_department_id IN NUMBER) IS
    BEGIN
        DELETE FROM Departments
        WHERE department_id = p_department_id;
    END delete_department;
END departments_pkg;
/

CREATE OR REPLACE PACKAGE projects_pkg IS
    PROCEDURE insert_project(
        p_project_id IN NUMBER,
        p_project_name IN VARCHAR2,
        p_project_details IN VARCHAR2,
        p_project_assign_date IN DATE,
        p_project_allocate_date IN DATE,
        p_project_completion_date IN DATE,
        p_project_budget IN NUMBER,
        p_project_technologies_used IN NUMBER,
        p_project_status IN NUMBER
    );
    PROCEDURE update_project(
        p_project_id IN NUMBER,
        p_project_name IN VARCHAR2,
        p_project_details IN VARCHAR2,
        p_project_assign_date IN DATE,
        p_project_allocate_date IN DATE,
        p_project_completion_date IN DATE,
        p_project_budget IN NUMBER,
        p_project_technologies_used IN NUMBER,
        p_project_status IN NUMBER
    );
    PROCEDURE delete_project(p_project_id IN NUMBER);
END projects_pkg;
/

CREATE OR REPLACE PACKAGE BODY projects_pkg IS
    PROCEDURE insert_project(
        p_project_id IN NUMBER,
        p_project_name IN VARCHAR2,
        p_project_details IN VARCHAR2,
        p_project_assign_date IN DATE,
        p_project_allocate_date IN DATE,
        p_project_completion_date IN DATE,
        p_project_budget IN NUMBER,
        p_project_technologies_used IN NUMBER,
        p_project_status IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Projects (
            project_id, project_name, project_details, project_assign_date,
            project_allocate_date, project_completion_date, project_budget,
            project_technologies_used, project_status
        )
        VALUES (
            p_project_id, p_project_name, p_project_details, p_project_assign_date,
            p_project_allocate_date, p_project_completion_date, p_project_budget,
            p_project_technologies_used, p_project_status
        );
    END insert_project;

    PROCEDURE update_project(
        p_project_id IN NUMBER,
        p_project_name IN VARCHAR2,
        p_project_details IN VARCHAR2,
        p_project_assign_date IN DATE,
        p_project_allocate_date IN DATE,
        p_project_completion_date IN DATE,
        p_project_budget IN NUMBER,
        p_project_technologies_used IN NUMBER,
        p_project_status IN NUMBER
    ) IS
    BEGIN
        UPDATE Projects
        SET project_name = p_project_name,
            project_details = p_project_details,
            project_assign_date = p_project_assign_date,
            project_allocate_date = p_project_allocate_date,
            project_completion_date = p_project_completion_date,
            project_budget = p_project_budget,
            project_technologies_used = p_project_technologies_used,
            project_status = p_project_status
        WHERE project_id = p_project_id;
    END update_project;

    PROCEDURE delete_project(p_project_id IN NUMBER) IS
    BEGIN
        DELETE FROM Projects
        WHERE project_id = p_project_id;
    END delete_project;
END projects_pkg;
/


CREATE OR REPLACE PACKAGE emp_proj_assignments_pkg IS
    PROCEDURE insert_assignment(
        p_assignment_id IN NUMBER,
        p_assign_date IN DATE,
        p_allocate_date IN DATE,
        p_completion_date IN DATE,
        p_hours_allocated IN NUMBER,
        p_hours_work IN NUMBER,
        p_remarks IN VARCHAR2,
        p_project_id IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_role IN NUMBER,
        p_assignment_status IN NUMBER
    );
    PROCEDURE update_assignment(
        p_assignment_id IN NUMBER,
        p_assign_date IN DATE,
        p_allocate_date IN DATE,
        p_completion_date IN DATE,
        p_hours_allocated IN NUMBER,
        p_hours_work IN NUMBER,
        p_remarks IN VARCHAR2,
        p_project_id IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_role IN NUMBER,
        p_assignment_status IN NUMBER
    );
    PROCEDURE delete_assignment(p_assignment_id IN NUMBER);
END emp_proj_assignments_pkg;
/

CREATE OR REPLACE PACKAGE BODY emp_proj_assignments_pkg IS
    PROCEDURE insert_assignment(
        p_assignment_id IN NUMBER,
        p_assign_date IN DATE,
        p_allocate_date IN DATE,
        p_completion_date IN DATE,
        p_hours_allocated IN NUMBER,
        p_hours_work IN NUMBER,
        p_remarks IN VARCHAR2,
        p_project_id IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_role IN NUMBER,
        p_assignment_status IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Employee_Project_Assignments (
            assignment_id, assignment_assign_date, assignment_allocate_date,
            assignment_completion_date, assignment_hours_allocated, assignment_hours_work,
            assignment_remarks, project_id, employee_id, project_role, assignment_status
        )
        VALUES (
            p_assignment_id, p_assign_date, p_allocate_date, p_completion_date,
            p_hours_allocated, p_hours_work, p_remarks, p_project_id,
            p_employee_id, p_project_role, p_assignment_status
        );
    END insert_assignment;

    PROCEDURE update_assignment(
        p_assignment_id IN NUMBER,
        p_assign_date IN DATE,
        p_allocate_date IN DATE,
        p_completion_date IN DATE,
        p_hours_allocated IN NUMBER,
        p_hours_work IN NUMBER,
        p_remarks IN VARCHAR2,
        p_project_id IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_role IN NUMBER,
        p_assignment_status IN NUMBER
    ) IS
    BEGIN
        UPDATE Employee_Project_Assignments
        SET assignment_assign_date = p_assign_date,
            assignment_allocate_date = p_allocate_date,
            assignment_completion_date = p_completion_date,
            assignment_hours_allocated = p_hours_allocated,
            assignment_hours_work = p_hours_work,
            assignment_remarks = p_remarks,
            project_id = p_project_id,
            employee_id = p_employee_id,
            project_role = p_project_role,
            assignment_status = p_assignment_status
        WHERE assignment_id = p_assignment_id;
    END update_assignment;

    PROCEDURE delete_assignment(p_assignment_id IN NUMBER) IS
    BEGIN
        DELETE FROM Employee_Project_Assignments
        WHERE assignment_id = p_assignment_id;
    END delete_assignment;
END emp_proj_assignments_pkg;
/


CREATE OR REPLACE PACKAGE attendance_pkg IS
    PROCEDURE insert_attendance(
        p_attendance_id IN NUMBER,
        p_attendance_date IN DATE,
        p_check_in_time IN TIMESTAMP,
        p_check_out_time IN TIMESTAMP,
        p_total_hours_work IN NUMBER,
        p_overtime_hours IN NUMBER,
        p_employee_id IN NUMBER,
        p_attendance_status IN NUMBER
    );
    PROCEDURE update_attendance(
        p_attendance_id IN NUMBER,
        p_attendance_date IN DATE,
        p_check_in_time IN TIMESTAMP,
        p_check_out_time IN TIMESTAMP,
        p_total_hours_work IN NUMBER,
        p_overtime_hours IN NUMBER,
        p_employee_id IN NUMBER,
        p_attendance_status IN NUMBER
    );
    PROCEDURE delete_attendance(p_attendance_id IN NUMBER);
END attendance_pkg;
/

CREATE OR REPLACE PACKAGE BODY attendance_pkg IS
    PROCEDURE insert_attendance(
        p_attendance_id IN NUMBER,
        p_attendance_date IN DATE,
        p_check_in_time IN TIMESTAMP,
        p_check_out_time IN TIMESTAMP,
        p_total_hours_work IN NUMBER,
        p_overtime_hours IN NUMBER,
        p_employee_id IN NUMBER,
        p_attendance_status IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Attendance (
            attendance_id, attendance_date, check_in_time, check_out_time,
            total_hours_work, overtime_hours, employee_id, attendance_status
        )
        VALUES (
            p_attendance_id, p_attendance_date, p_check_in_time, p_check_out_time,
            p_total_hours_work, p_overtime_hours, p_employee_id, p_attendance_status
        );
    END insert_attendance;

    PROCEDURE update_attendance(
        p_attendance_id IN NUMBER,
        p_attendance_date IN DATE,
        p_check_in_time IN TIMESTAMP,
        p_check_out_time IN TIMESTAMP,
        p_total_hours_work IN NUMBER,
        p_overtime_hours IN NUMBER,
        p_employee_id IN NUMBER,
        p_attendance_status IN NUMBER
    ) IS
    BEGIN
        UPDATE Attendance
        SET attendance_date = p_attendance_date,
            check_in_time = p_check_in_time,
            check_out_time = p_check_out_time,
            total_hours_work = p_total_hours_work,
            overtime_hours = p_overtime_hours,
            employee_id = p_employee_id,
            attendance_status = p_attendance_status
        WHERE attendance_id = p_attendance_id;
    END update_attendance;

    PROCEDURE delete_attendance(p_attendance_id IN NUMBER) IS
    BEGIN
        DELETE FROM Attendance
        WHERE attendance_id = p_attendance_id;
    END delete_attendance;
END attendance_pkg;
/

CREATE OR REPLACE PACKAGE training_programs_pkg IS
    PROCEDURE insert_training_program(
        p_training_id IN NUMBER,
        p_training_program_name IN VARCHAR2,
        p_training_program_details IN VARCHAR2,
        p_training_technology_skills IN VARCHAR2,
        p_training_start_date IN DATE,
        p_training_end_date IN DATE,
        p_training_duration IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_id IN NUMBER,
        p_training_status IN NUMBER
    );
    PROCEDURE update_training_program(
        p_training_id IN NUMBER,
        p_training_program_name IN VARCHAR2,
        p_training_program_details IN VARCHAR2,
        p_training_technology_skills IN VARCHAR2,
        p_training_start_date IN DATE,
        p_training_end_date IN DATE,
        p_training_duration IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_id IN NUMBER,
        p_training_status IN NUMBER
    );
    PROCEDURE delete_training_program(p_training_id IN NUMBER);
END training_programs_pkg;
/

CREATE OR REPLACE PACKAGE BODY training_programs_pkg IS
    PROCEDURE insert_training_program(
        p_training_id IN NUMBER,
        p_training_program_name IN VARCHAR2,
        p_training_program_details IN VARCHAR2,
        p_training_technology_skills IN VARCHAR2,
        p_training_start_date IN DATE,
        p_training_end_date IN DATE,
        p_training_duration IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_id IN NUMBER,
        p_training_status IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Training_Programs (
            training_id, training_program_name, training_program_details,
            training_technology_skills, training_start_date, training_end_date,
            training_duration, employee_id, project_id, training_status
        )
        VALUES (
            p_training_id, p_training_program_name, p_training_program_details,
            p_training_technology_skills, p_training_start_date, p_training_end_date,
            p_training_duration, p_employee_id, p_project_id, p_training_status
        );
    END insert_training_program;

    PROCEDURE update_training_program(
        p_training_id IN NUMBER,
        p_training_program_name IN VARCHAR2,
        p_training_program_details IN VARCHAR2,
        p_training_technology_skills IN VARCHAR2,
        p_training_start_date IN DATE,
        p_training_end_date IN DATE,
        p_training_duration IN NUMBER,
        p_employee_id IN NUMBER,
        p_project_id IN NUMBER,
        p_training_status IN NUMBER
    ) IS
    BEGIN
        UPDATE Training_Programs
        SET training_program_name = p_training_program_name,
            training_program_details = p_training_program_details,
            training_technology_skills = p_training_technology_skills,
            training_start_date = p_training_start_date,
            training_end_date = p_training_end_date,
            training_duration = p_training_duration,
            employee_id = p_employee_id,
            project_id = p_project_id,
            training_status = p_training_status
        WHERE training_id = p_training_id;
    END update_training_program;

    PROCEDURE delete_training_program(p_training_id IN NUMBER) IS
    BEGIN
        DELETE FROM Training_Programs
        WHERE training_id = p_training_id;
    END delete_training_program;
END training_programs_pkg;
/

CREATE OR REPLACE PACKAGE salaries_pkg IS
    PROCEDURE insert_salary(
        p_salary_id IN NUMBER,
        p_salary_amount IN NUMBER,
        p_effective_from IN DATE,
        p_salary_category IN VARCHAR2,
        p_employee_id IN NUMBER,
        p_attendance_id IN NUMBER,
        p_leave_id IN NUMBER
    );
    PROCEDURE update_salary(
        p_salary_id IN NUMBER,
        p_salary_amount IN NUMBER,
        p_effective_from IN DATE,
        p_salary_category IN VARCHAR2,
        p_employee_id IN NUMBER,
        p_attendance_id IN NUMBER,
        p_leave_id IN NUMBER
    );
    PROCEDURE delete_salary(p_salary_id IN NUMBER);
END salaries_pkg;
/

CREATE OR REPLACE PACKAGE BODY salaries_pkg IS
    PROCEDURE insert_salary(
        p_salary_id IN NUMBER,
        p_salary_amount IN NUMBER,
        p_effective_from IN DATE,
        p_salary_category IN VARCHAR2,
        p_employee_id IN NUMBER,
        p_attendance_id IN NUMBER,
        p_leave_id IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Salaries (
            salary_id, salary_amount, salary_effective_from, salary_category,
            employee_id, attendance_id, leave_id
        )
        VALUES (
            p_salary_id, p_salary_amount, p_effective_from, p_salary_category,
            p_employee_id, p_attendance_id, p_leave_id
        );
    END insert_salary;

    PROCEDURE update_salary(
        p_salary_id IN NUMBER,
        p_salary_amount IN NUMBER,
        p_effective_from IN DATE,
        p_salary_category IN VARCHAR2,
        p_employee_id IN NUMBER,
        p_attendance_id IN NUMBER,
        p_leave_id IN NUMBER
    ) IS
    BEGIN
        UPDATE Salaries
        SET salary_amount = p_salary_amount,
            salary_effective_from = p_effective_from,
            salary_category = p_salary_category,
            employee_id = p_employee_id,
            attendance_id = p_attendance_id,
            leave_id = p_leave_id
        WHERE salary_id = p_salary_id;
    END update_salary;

    PROCEDURE delete_salary(p_salary_id IN NUMBER) IS
    BEGIN
        DELETE FROM Salaries
        WHERE salary_id = p_salary_id;
    END delete_salary;
END salaries_pkg;
/























-- Procedures for Status Table
CREATE OR REPLACE PROCEDURE insert_status(p_status_id NUMBER, p_status VARCHAR2) IS
BEGIN
    INSERT INTO Status (status_id, status) 
    VALUES (p_status_id, p_status);
END insert_status;
/

CREATE OR REPLACE PROCEDURE update_status(p_status_id NUMBER, p_status VARCHAR2) IS
BEGIN
    UPDATE Status
    SET status = p_status
    WHERE status_id = p_status_id;
END update_status;
/

CREATE OR REPLACE PROCEDURE delete_status(p_status_id NUMBER) IS
BEGIN
    DELETE FROM Status 
    WHERE status_id = p_status_id;
END delete_status;
/

-- Procedures for Project_Role Table
CREATE OR REPLACE PROCEDURE insert_project_role(p_project_role_id NUMBER, p_project_role VARCHAR2) IS
BEGIN
    INSERT INTO Project_Role (project_role_id, project_role) 
    VALUES (p_project_role_id, p_project_role);
END insert_project_role;
/

CREATE OR REPLACE PROCEDURE update_project_role(p_project_role_id NUMBER, p_project_role VARCHAR2) IS
BEGIN
    UPDATE Project_Role
    SET project_role = p_project_role
    WHERE project_role_id = p_project_role_id;
END update_project_role;
/

CREATE OR REPLACE PROCEDURE delete_project_role(p_project_role_id NUMBER) IS
BEGIN
    DELETE FROM Project_Role 
    WHERE project_role_id = p_project_role_id;
END delete_project_role;
/

-- Procedures for Project_Status Table
CREATE OR REPLACE PROCEDURE insert_project_status(p_project_status_id NUMBER, p_project_status VARCHAR2) IS
BEGIN
    INSERT INTO Project_Status (project_status_id, project_status) 
    VALUES (p_project_status_id, p_project_status);
END insert_project_status;
/

CREATE OR REPLACE PROCEDURE update_project_status(p_project_status_id NUMBER, p_project_status VARCHAR2) IS
BEGIN
    UPDATE Project_Status
    SET project_status = p_project_status
    WHERE project_status_id = p_project_status_id;
END update_project_status;
/

CREATE OR REPLACE PROCEDURE delete_project_status(p_project_status_id NUMBER) IS
BEGIN
    DELETE FROM Project_Status 
    WHERE project_status_id = p_project_status_id;
END delete_project_status;
/

-- Procedures for Attendance_Status Table
CREATE OR REPLACE PROCEDURE insert_attendance_status(p_attendance_status_id NUMBER, p_attendance_status VARCHAR2) IS
BEGIN
    INSERT INTO Attendance_Status (attendance_status_id, attendance_status) 
    VALUES (p_attendance_status_id, p_attendance_status);
END insert_attendance_status;
/

CREATE OR REPLACE PROCEDURE update_attendance_status(p_attendance_status_id NUMBER, p_attendance_status VARCHAR2) IS
BEGIN
    UPDATE Attendance_Status
    SET attendance_status = p_attendance_status
    WHERE attendance_status_id = p_attendance_status_id;
END update_attendance_status;
/

CREATE OR REPLACE PROCEDURE delete_attendance_status(p_attendance_status_id NUMBER) IS
BEGIN
    DELETE FROM Attendance_Status 
    WHERE attendance_status_id = p_attendance_status_id;
END delete_attendance_status;
/

-- Procedures for Technology Table
CREATE OR REPLACE PROCEDURE insert_technology(p_technology_id NUMBER, p_technology_name VARCHAR2, p_technology_details VARCHAR2) IS
BEGIN
    INSERT INTO Technology (technology_id, technology_name, technology_details)
    VALUES (p_technology_id, p_technology_name, p_technology_details);
END insert_technology;
/

CREATE OR REPLACE PROCEDURE update_technology(p_technology_id NUMBER, p_technology_name VARCHAR2, p_technology_details VARCHAR2) IS
BEGIN
    UPDATE Technology
    SET technology_name = p_technology_name, technology_details = p_technology_details
    WHERE technology_id = p_technology_id;
END update_technology;
/

CREATE OR REPLACE PROCEDURE delete_technology(p_technology_id NUMBER) IS
BEGIN
    DELETE FROM Technology 
    WHERE technology_id = p_technology_id;
END delete_technology;
/

-- Procedures for Locations Table
CREATE OR REPLACE PROCEDURE insert_location(
    p_location_id NUMBER,
    p_location_block VARCHAR2,
    p_location_floor VARCHAR2,
    p_location_status NUMBER
) IS
BEGIN
    INSERT INTO Locations (location_id, location_status, location) 
    VALUES (p_location_id, p_location_status, location_nested_table(location_obj(p_location_block, p_location_floor, p_location_block)));
END insert_location;
/

CREATE OR REPLACE PROCEDURE update_location(
    p_location_id NUMBER,
    p_location_block VARCHAR2,
    p_location_floor VARCHAR2,
    p_location_status NUMBER
) IS
BEGIN
    UPDATE Locations
    SET location_status = p_location_status,
        location = location_nested_table(location_obj(p_location_block, p_location_floor, p_location_block))
    WHERE location_id = p_location_id;
END update_location;
/

CREATE OR REPLACE PROCEDURE delete_location(p_location_id NUMBER) IS
BEGIN
    DELETE FROM Locations 
    WHERE location_id = p_location_id;
END delete_location;
/

-- Procedures for Leave Table
CREATE OR REPLACE PROCEDURE insert_leave(
    p_leave_id NUMBER,
    p_type VARCHAR2,
    p_from_date DATE,
    p_to_date DATE,
    p_total_days NUMBER,
    p_employee_id NUMBER
) IS
BEGIN
    INSERT INTO Leave (
        leave_id, leave_type, leave_from_date, leave_to_date, leave_total_days, employee_id
    )
    VALUES (
        p_leave_id, p_type, p_from_date, p_to_date, p_total_days, p_employee_id
    );
END insert_leave;
/

CREATE OR REPLACE PROCEDURE update_leave(
    p_leave_id NUMBER,
    p_type VARCHAR2,
    p_from_date DATE,
    p_to_date DATE,
    p_total_days NUMBER,
    p_employee_id NUMBER
) IS
BEGIN
    UPDATE Leave
    SET leave_type = p_type,
        leave_from_date = p_from_date,
        leave_to_date = p_to_date,
        leave_total_days = p_total_days,
        employee_id = p_employee_id
    WHERE leave_id = p_leave_id;
END update_leave;
/

CREATE OR REPLACE PROCEDURE delete_leave(p_leave_id NUMBER) IS
BEGIN
    DELETE FROM Leave 
    WHERE leave_id = p_leave_id;
END delete_leave;
/





FUNCTION:


CREATE OR REPLACE  FUNCTION get_all_status
    RETURN SYS_REFCURSOR
    IS
        result_cursor SYS_REFCURSOR;
    BEGIN
        OPEN result_cursor FOR
        SELECT * FROM Status;
        RETURN result_cursor;
    END;
/


CREATE OR REPLACE FUNCTION get_all_project_roles
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Project_Role;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_project_statuses
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Project_Status;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_attendance_statuses
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Attendance_Status;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_technologies
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Technology;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_employees
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Employees;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_departments
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Departments;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_designations
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Designations;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_salaries
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Salaries;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_locations
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Locations;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_projects
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Projects;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_employee_project_assignments
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Employee_Project_Assignments;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_attendance
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Attendance;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_leaves
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Leave;
    RETURN result_cursor;
END;
/


CREATE OR REPLACE FUNCTION get_all_training_programs
RETURN SYS_REFCURSOR
IS
    result_cursor SYS_REFCURSOR;
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM Training_Programs;
    RETURN result_cursor;
END;
/




